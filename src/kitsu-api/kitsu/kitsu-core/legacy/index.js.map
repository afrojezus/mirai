{"version":3,"file":"index.js","sources":["../src/error/index.js","../src/query/index.js","../src/deattribute/index.js","../src/filterIncludes/index.js","../src/linkRelationships/index.js","../src/deserialise/index.js","../src/serialise/index.js","../src/camel/index.js","../src/kebab/index.js","../src/snake/index.js"],"sourcesContent":["/**\r\n * Mutates an error and rethrows it\r\n *\r\n * @param {Object} E The Error\r\n * @throws {Object} The mutated Error\r\n */\r\nexport function error (E) {\r\n  if (E.response) {\r\n    const e = E.response.data\r\n    if (e && e.errors) E.errors = e.errors\r\n  }\r\n  throw E\r\n}\r\n","function deObject (obj, param) {\n  let query = ''\n  for (let key in obj) {\n    let value = obj[key]\n    if (param) query += `&${param}`\n    if (typeof value === 'object') query += `[${key}]${deObject(value)}`\n    else query += `[${key}]=${value}`\n  }\n  return query\n}\n\n/**\n * Constructs a URL query string for JSON:API parameters\n *\n * @param {Object} params Parameters to parse\n * @param {boolean} prefix Prefix returned string with `?` (default `false`)\n * @returns {string} URL query string\n */\nexport function query (params, prefix = false) {\n  let query = ''\n  for (let param in params) {\n    let value = params[param]\n    if (typeof value === 'object') query += deObject(value, param)\n    else query += `&${param}=${value}`\n  }\n  query = encodeURI(query.slice(1))\n  return params ? (prefix ? `?${query}` : query) : ''\n}\n","/**\n * Hoists attributes to be top-level\n *\n * @param {Object|Array} data Resource data\n * @returns {Object|Array} Deattributed resource data\n *\n * @example <caption>Deattribute an array of resources</caption>\n * // JSON:API 'data' field\n * const data = [\n *   {\n *     id: '1',\n *     type: 'users',\n *     attributes: { slug: 'wopian' }\n *   }\n * ]\n *\n * const output = await deattribute(data) // [ { id: '1', type: 'users', slug: 'wopian' } ]\n *\n * @example <caption>Deattribute a resource</caption>\n * // JSON:API 'data' field\n * const data = {\n *   id: '1',\n *   type: 'users',\n *   attributes: { slug: 'wopian' }\n * }\n *\n * const output = await deattribute(data) // { id: '1', type: 'users', slug: 'wopian' }\n */\nexport async function deattribute (data) {\n  if (typeof data === 'object' && data !== null) {\n    if (Array.isArray(data)) await data.map(async el => deattribute(el))\n    else if (data.attributes && data.attributes.constructor === Object) {\n      Object.keys(data.attributes).forEach(key => { data[key] = data.attributes[key] })\n      delete data.attributes\n    }\n  }\n  return data\n}\n","import { error } from '../error'\n\n/**\n * Filters includes for the specific relationship\n *\n * @param {Object} included The response included object\n * @param {Object} opts\n * @param {string} opts.id The relationship ID\n * @param {string} opts.type The relationship type\n * @returns {Array} The matched includes\n */\nexport async function filterIncludes (included, { id, type }) {\n  try {\n    const filtered = included.filter(el => {\n      return el.id === id && el.type === type\n    })[0] || { id, type }\n    return Object.assign({}, filtered)\n  } catch (E) {\n    error(E)\n  }\n}\n","import { deattribute } from '../deattribute'\nimport { filterIncludes } from '../filterIncludes'\n\n/**\n * Core function to link relationships to included data\n *\n * @param {Object} resource The included resource\n * @param {string} resource.id Resource ID\n * @param {string} resource.type Resource type\n * @param {Object} resource.meta Meta information\n * @param {Object} included The response included object\n * @private\n */\nasync function link ({ id, type, meta }, included) {\n  const filtered = await filterIncludes(included, { id, type })\n  if (filtered.relationships) await linkRelationships(filtered, included)\n  if (meta) filtered.meta = meta\n  return deattribute(filtered)\n}\n\n/**\n * Helper function for multiple relationships\n *\n * @param {Object} data The response data object\n * @param {Object} included The response included object\n * @param {string} key Name of the relationship item\n * @private\n */\nasync function linkArray (data, included, key) {\n  data[key] = []\n  for (let resource of await data.relationships[key].data) {\n    data[key].push(await link(resource, included))\n  }\n}\n\n/**\n * Helper function for single relationships\n *\n * @param {Object} data The response data object\n * @param {Object} included The response included object\n * @param {string} key Name of the relationship item\n * @private\n */\nasync function linkObject (data, included, key) {\n  data[key] = await link(data.relationships[key].data, included)\n  delete data[key].relationships\n}\n\n/**\n * Links relationships to included data\n *\n * @param {Object} data The response data object\n * @param {Object} included The response included object\n */\nexport async function linkRelationships (data, included) {\n  const { relationships } = data\n  let removeRelationships = false\n\n  for (let key in await relationships) {\n    // Relationship contains collection of resources\n    if (relationships[key].data && Array.isArray(relationships[key].data)) {\n      await linkArray(data, included, key)\n      removeRelationships = true\n    // Relationship contains a single resource\n    } else if (relationships[key].data) {\n      await linkObject(data, included, key)\n      removeRelationships = true\n    }\n  }\n\n  if (removeRelationships) delete data.relationships\n\n  return data\n}\n","import { deattribute } from '../deattribute'\nimport { linkRelationships } from '../linkRelationships'\n\n/**\n * Deserialises an array from a JSON-API structure\n *\n * @param {*} obj The response\n * @returns {Object} The deserialised response\n * @private\n */\nasync function deserialiseArray (obj) {\n  for (let value of await obj.data) {\n    if (obj.included) value = await linkRelationships(value, obj.included)\n    if (value.attributes) value = await deattribute(value)\n    obj.data[obj.data.indexOf(value)] = value\n  }\n  return obj\n}\n\n/**\n * Deserialises a JSON-API response\n *\n * @param {Object} obj The response\n * @returns {Object} The deserialised response\n *\n * @example <caption>Deserialise with a basic data object</caption>\n * await deserialise({\n *   data: {\n *     id: '1',\n *     attributes: { liked: true }\n *   },\n *   meta: { hello: 'world' }\n * }) // { data: { id: '1', liked: true }, meta: { hello: 'world' } }\n *\n * @example <caption>Deserialise with relationships</caption>\n * await deserialise({\n *   data: {\n *     id: '1',\n *     relationships: {\n *       user: {\n *         data: {\n *           type: 'users',\n *           id: '2' }\n *       }\n *     }\n *   },\n *   included: [\n *     {\n *       type: 'users',\n *       id: '2',\n *       attributes: { slug: 'wopian' }\n *     }\n *   ]\n * }) // { data: { id: '1', user: { type: 'users', id: '2', slug: 'wopian' } } }\n */\nexport async function deserialise (obj) {\n  // Collection of resources\n  // Note: constructor is currently faster than isArray()\n  // http://jsben.ch/QgYAV\n  if (obj.data && obj.data.constructor === Array) obj = await deserialiseArray(obj)\n  // Single resource with included relationships\n  else if (obj.included) obj.data = await linkRelationships(obj.data, obj.included)\n\n  delete obj.included\n\n  // Move attributes to the parent object\n  if (obj.data && obj.data.attributes) obj.data = await deattribute(obj.data)\n\n  return obj\n}\n","import { error } from '../error'\n\nconst requiresID = (method, key) => `${method} requires an ID for the ${key} relationships`\n\n/**\n * Serialises an object into a JSON-API structure\n *\n * @param {string} model Request model\n * @param {Object} obj The data\n * @param {string} method Request type\n * @returns {Object} The serialised data\n *\n * @example <caption>Due to its usage in kitsu, it **MUST** be called with **this** set in 5.0.x</caption>\n * import { serialise, camel, kebab } from 'kitsu-core'\n * import plural from 'pluralize'\n *\n * const output = await serialise.apply({ camel, resCase: kebab, plural }, [ model, obj, 'PATCH' ])\n */\nexport async function serialise (model, obj = {}, method = 'POST') {\n  try {\n    // Check if obj is not an object or empty\n    if (obj.constructor !== Object || Object.keys(obj).length === 0) {\n      throw new Error(`${method} requires a JSON object body`)\n    }\n    const type = this.plural(this.camel(model))\n    const data = { type }\n\n    // A POST request is the only request to not require an ID\n    if (method !== 'POST' && !obj.id) {\n      throw new Error(`${method} requires an ID for the ${type} type`)\n    }\n\n    // Add ID to data - MUST be a string\n    if (method !== 'POST') {\n      data.id = obj.id.toString()\n    }\n\n    // Attributes and relationships\n    for (let key in obj) {\n      // Check if it's a relationship\n      if (obj[key] !== null && obj[key].constructor === Object) {\n        if (typeof obj[key].id === 'string') {\n          if (!data.relationships) data.relationships = {}\n          // Guess relationship type if not provided\n          if (!obj[key].type) obj[key].type = this.plural(this.camel(key))\n          data.relationships[key] = { data: Object.assign(obj[key]) }\n        } else throw new Error(requiresID(method, key))\n      // Check if it's a relationship array\n      } else if (obj[key] !== null && Array.isArray(obj[key])) {\n        // validate whole array\n        const keytype = this.plural(this.camel(key))\n        if (!data.relationships) data.relationships = {}\n        data.relationships[key] = { data: obj[key].map(elem => {\n          if (!elem.id) throw new Error(requiresID(method, key))\n          return {\n            id: elem.id,\n            type: elem.type || keytype\n          }\n        }) }\n      } else if (key !== 'id' && key !== 'type') { // Its an attribute\n        if (!data.attributes) data.attributes = {}\n        data.attributes[key] = obj[key]\n      }\n    }\n    return { data }\n  } catch (E) {\n    throw error(E)\n  }\n}\n","/**\n * Converts kebab-case and snake_case into camelCase\n *\n * @name camel\n * @param {string} s String to convert\n * @returns {string} camelCase formatted string\n *\n * @example <caption>Convert kebab-case</caption>\n * camel('hello-world') // 'helloWorld'\n *\n * @example <caption>Convert snake_case</caption>\n * camel('hello_world') // 'helloWorld'\n */\nexport default s => s.replace(/[-_][a-z\\u00E0-\\u00F6\\u00F8-\\u00FE]/g, match => match.slice(1).toUpperCase())\n","/**\n * Converts camelCase into kebab-case\n *\n * @name kebab\n * @param {string} s camelCase string\n * @returns {string} kekab-case formatted string\n *\n * @example\n * kebab('helloWorld') // 'hello-world'\n */\nexport default s => s.charAt(0).toLowerCase() + s.slice(1).replace(/[A-Z\\u00C0-\\u00D6\\u00D8-\\u00DE]/g, match => '-' + match.toLowerCase())\n","/**\n * Converts camelCase into snake_case\n *\n * @name snake\n * @param {string} s camelCase string\n * @returns {string} snake_case formatted string\n *\n * @example\n * snake('helloWorld') // 'hello_world'\n */\nexport default s => s.charAt(0).toLowerCase() + s.slice(1).replace(/[A-Z\\u00C0-\\u00D6\\u00D8-\\u00DE]/g, match => '_' + match.toLowerCase())\n"],"names":["E","response","e","data","errors","query","key","value","obj","deObject","prefix","param","params","encodeURI","slice","Array","isArray","map","deattribute","attributes","constructor","Object","keys","forEach","id","type","included","filter","el","assign","meta","filterIncludes","filtered","relationships","linkRelationships","link","push","linkArray","linkObject","indexOf","deserialiseArray","requiresID","method","length","Error","plural","camel","toString","keytype","elem","error","s","replace","match","toUpperCase","charAt","toLowerCase"],"mappings":"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"}