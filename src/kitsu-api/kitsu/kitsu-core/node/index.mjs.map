{"version":3,"file":"index.mjs","sources":["../src/deattribute/index.js","../src/error/index.js","../src/filterIncludes/index.js","../src/linkRelationships/index.js","../src/deserialise/index.js","../src/query/index.js","../src/serialise/index.js","../src/camel/index.js","../src/kebab/index.js","../src/snake/index.js"],"sourcesContent":["/**\n * Hoists attributes to be top-level\n *\n * @param {Object|Array} data Resource data\n * @returns {Object|Array} Deattributed resource data\n *\n * @example <caption>Deattribute an array of resources</caption>\n * // JSON:API 'data' field\n * const data = [\n *   {\n *     id: '1',\n *     type: 'users',\n *     attributes: { slug: 'wopian' }\n *   }\n * ]\n *\n * const output = await deattribute(data) // [ { id: '1', type: 'users', slug: 'wopian' } ]\n *\n * @example <caption>Deattribute a resource</caption>\n * // JSON:API 'data' field\n * const data = {\n *   id: '1',\n *   type: 'users',\n *   attributes: { slug: 'wopian' }\n * }\n *\n * const output = await deattribute(data) // { id: '1', type: 'users', slug: 'wopian' }\n */\nexport async function deattribute (data) {\n  if (typeof data === 'object' && data !== null) {\n    if (Array.isArray(data)) await data.map(async el => deattribute(el))\n    else if (data.attributes && data.attributes.constructor === Object) {\n      Object.keys(data.attributes).forEach(key => { data[key] = data.attributes[key] })\n      delete data.attributes\n    }\n  }\n  return data\n}\n","/**\r\n * Mutates an error and rethrows it\r\n *\r\n * @param {Object} E The Error\r\n * @throws {Object} The mutated Error\r\n */\r\nexport function error (E) {\r\n  if (E.response) {\r\n    const e = E.response.data\r\n    if (e && e.errors) E.errors = e.errors\r\n  }\r\n  throw E\r\n}\r\n","import { error } from '../error'\n\n/**\n * Filters includes for the specific relationship\n *\n * @param {Object} included The response included object\n * @param {Object} opts\n * @param {string} opts.id The relationship ID\n * @param {string} opts.type The relationship type\n * @returns {Array} The matched includes\n */\nexport async function filterIncludes (included, { id, type }) {\n  try {\n    const filtered = included.filter(el => {\n      return el.id === id && el.type === type\n    })[0] || { id, type }\n    return Object.assign({}, filtered)\n  } catch (E) {\n    error(E)\n  }\n}\n","import { deattribute } from '../deattribute'\nimport { filterIncludes } from '../filterIncludes'\n\n/**\n * Core function to link relationships to included data\n *\n * @param {Object} resource The included resource\n * @param {string} resource.id Resource ID\n * @param {string} resource.type Resource type\n * @param {Object} resource.meta Meta information\n * @param {Object} included The response included object\n * @private\n */\nasync function link ({ id, type, meta }, included) {\n  const filtered = await filterIncludes(included, { id, type })\n  if (filtered.relationships) await linkRelationships(filtered, included)\n  if (meta) filtered.meta = meta\n  return deattribute(filtered)\n}\n\n/**\n * Helper function for multiple relationships\n *\n * @param {Object} data The response data object\n * @param {Object} included The response included object\n * @param {string} key Name of the relationship item\n * @private\n */\nasync function linkArray (data, included, key) {\n  data[key] = []\n  for (let resource of await data.relationships[key].data) {\n    data[key].push(await link(resource, included))\n  }\n}\n\n/**\n * Helper function for single relationships\n *\n * @param {Object} data The response data object\n * @param {Object} included The response included object\n * @param {string} key Name of the relationship item\n * @private\n */\nasync function linkObject (data, included, key) {\n  data[key] = await link(data.relationships[key].data, included)\n  delete data[key].relationships\n}\n\n/**\n * Links relationships to included data\n *\n * @param {Object} data The response data object\n * @param {Object} included The response included object\n */\nexport async function linkRelationships (data, included) {\n  const { relationships } = data\n  let removeRelationships = false\n\n  for (let key in await relationships) {\n    // Relationship contains collection of resources\n    if (relationships[key].data && Array.isArray(relationships[key].data)) {\n      await linkArray(data, included, key)\n      removeRelationships = true\n    // Relationship contains a single resource\n    } else if (relationships[key].data) {\n      await linkObject(data, included, key)\n      removeRelationships = true\n    }\n  }\n\n  if (removeRelationships) delete data.relationships\n\n  return data\n}\n","import { deattribute } from '../deattribute'\nimport { linkRelationships } from '../linkRelationships'\n\n/**\n * Deserialises an array from a JSON-API structure\n *\n * @param {*} obj The response\n * @returns {Object} The deserialised response\n * @private\n */\nasync function deserialiseArray (obj) {\n  for (let value of await obj.data) {\n    if (obj.included) value = await linkRelationships(value, obj.included)\n    if (value.attributes) value = await deattribute(value)\n    obj.data[obj.data.indexOf(value)] = value\n  }\n  return obj\n}\n\n/**\n * Deserialises a JSON-API response\n *\n * @param {Object} obj The response\n * @returns {Object} The deserialised response\n *\n * @example <caption>Deserialise with a basic data object</caption>\n * await deserialise({\n *   data: {\n *     id: '1',\n *     attributes: { liked: true }\n *   },\n *   meta: { hello: 'world' }\n * }) // { data: { id: '1', liked: true }, meta: { hello: 'world' } }\n *\n * @example <caption>Deserialise with relationships</caption>\n * await deserialise({\n *   data: {\n *     id: '1',\n *     relationships: {\n *       user: {\n *         data: {\n *           type: 'users',\n *           id: '2' }\n *       }\n *     }\n *   },\n *   included: [\n *     {\n *       type: 'users',\n *       id: '2',\n *       attributes: { slug: 'wopian' }\n *     }\n *   ]\n * }) // { data: { id: '1', user: { type: 'users', id: '2', slug: 'wopian' } } }\n */\nexport async function deserialise (obj) {\n  // Collection of resources\n  // Note: constructor is currently faster than isArray()\n  // http://jsben.ch/QgYAV\n  if (obj.data && obj.data.constructor === Array) obj = await deserialiseArray(obj)\n  // Single resource with included relationships\n  else if (obj.included) obj.data = await linkRelationships(obj.data, obj.included)\n\n  delete obj.included\n\n  // Move attributes to the parent object\n  if (obj.data && obj.data.attributes) obj.data = await deattribute(obj.data)\n\n  return obj\n}\n","function deObject (obj, param) {\n  let query = ''\n  for (let key in obj) {\n    let value = obj[key]\n    if (param) query += `&${param}`\n    if (typeof value === 'object') query += `[${key}]${deObject(value)}`\n    else query += `[${key}]=${value}`\n  }\n  return query\n}\n\n/**\n * Constructs a URL query string for JSON:API parameters\n *\n * @param {Object} params Parameters to parse\n * @param {boolean} prefix Prefix returned string with `?` (default `false`)\n * @returns {string} URL query string\n */\nexport function query (params, prefix = false) {\n  let query = ''\n  for (let param in params) {\n    let value = params[param]\n    if (typeof value === 'object') query += deObject(value, param)\n    else query += `&${param}=${value}`\n  }\n  query = encodeURI(query.slice(1))\n  return params ? (prefix ? `?${query}` : query) : ''\n}\n","import { error } from '../error'\n\nconst requiresID = (method, key) => `${method} requires an ID for the ${key} relationships`\n\n/**\n * Serialises an object into a JSON-API structure\n *\n * @param {string} model Request model\n * @param {Object} obj The data\n * @param {string} method Request type\n * @returns {Object} The serialised data\n *\n * @example <caption>Due to its usage in kitsu, it **MUST** be called with **this** set in 5.0.x</caption>\n * import { serialise, camel, kebab } from 'kitsu-core'\n * import plural from 'pluralize'\n *\n * const output = await serialise.apply({ camel, resCase: kebab, plural }, [ model, obj, 'PATCH' ])\n */\nexport async function serialise (model, obj = {}, method = 'POST') {\n  try {\n    // Check if obj is not an object or empty\n    if (obj.constructor !== Object || Object.keys(obj).length === 0) {\n      throw new Error(`${method} requires a JSON object body`)\n    }\n    const type = this.plural(this.camel(model))\n    const data = { type }\n\n    // A POST request is the only request to not require an ID\n    if (method !== 'POST' && !obj.id) {\n      throw new Error(`${method} requires an ID for the ${type} type`)\n    }\n\n    // Add ID to data - MUST be a string\n    if (method !== 'POST') {\n      data.id = obj.id.toString()\n    }\n\n    // Attributes and relationships\n    for (let key in obj) {\n      // Check if it's a relationship\n      if (obj[key] !== null && obj[key].constructor === Object) {\n        if (typeof obj[key].id === 'string') {\n          if (!data.relationships) data.relationships = {}\n          // Guess relationship type if not provided\n          if (!obj[key].type) obj[key].type = this.plural(this.camel(key))\n          data.relationships[key] = { data: Object.assign(obj[key]) }\n        } else throw new Error(requiresID(method, key))\n      // Check if it's a relationship array\n      } else if (obj[key] !== null && Array.isArray(obj[key])) {\n        // validate whole array\n        const keytype = this.plural(this.camel(key))\n        if (!data.relationships) data.relationships = {}\n        data.relationships[key] = { data: obj[key].map(elem => {\n          if (!elem.id) throw new Error(requiresID(method, key))\n          return {\n            id: elem.id,\n            type: elem.type || keytype\n          }\n        }) }\n      } else if (key !== 'id' && key !== 'type') { // Its an attribute\n        if (!data.attributes) data.attributes = {}\n        data.attributes[key] = obj[key]\n      }\n    }\n    return { data }\n  } catch (E) {\n    throw error(E)\n  }\n}\n","/**\n * Converts kebab-case and snake_case into camelCase\n *\n * @name camel\n * @param {string} s String to convert\n * @returns {string} camelCase formatted string\n *\n * @example <caption>Convert kebab-case</caption>\n * camel('hello-world') // 'helloWorld'\n *\n * @example <caption>Convert snake_case</caption>\n * camel('hello_world') // 'helloWorld'\n */\nexport default s => s.replace(/[-_][a-z\\u00E0-\\u00F6\\u00F8-\\u00FE]/g, match => match.slice(1).toUpperCase())\n","/**\n * Converts camelCase into kebab-case\n *\n * @name kebab\n * @param {string} s camelCase string\n * @returns {string} kekab-case formatted string\n *\n * @example\n * kebab('helloWorld') // 'hello-world'\n */\nexport default s => s.charAt(0).toLowerCase() + s.slice(1).replace(/[A-Z\\u00C0-\\u00D6\\u00D8-\\u00DE]/g, match => '-' + match.toLowerCase())\n","/**\n * Converts camelCase into snake_case\n *\n * @name snake\n * @param {string} s camelCase string\n * @returns {string} snake_case formatted string\n *\n * @example\n * snake('helloWorld') // 'hello_world'\n */\nexport default s => s.charAt(0).toLowerCase() + s.slice(1).replace(/[A-Z\\u00C0-\\u00D6\\u00D8-\\u00DE]/g, match => '_' + match.toLowerCase())\n"],"names":["data","Array","isArray","map","deattribute","attributes","constructor","Object","keys","forEach","error","E","response","e","errors","id","type","filtered","included","filter","el","assign","meta","filterIncludes","relationships","linkRelationships","resource","push","link","removeRelationships","key","linkArray","linkObject","obj","value","indexOf","deserialiseArray","deObject","query","prefix","param","params","encodeURI","slice","requiresID","method","length","Error","plural","camel","toString","keytype","elem","s","replace","match","toUpperCase","charAt","toLowerCase"],"mappings":"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"}