{"version":3,"file":"index.js","sources":["../src/index.js"],"sourcesContent":["import axios from 'axios'\nimport { camel, deserialise, error, kebab, query, serialise, snake } from 'kitsu-core'\n\n/**\n * Creates a new `kitsu` instance\n *\n * @param {Object} options Options\n * @param {string} options.baseURL Set the API endpoint (default `https://kitsu.io/api/edge`)\n * @param {Object} options.headers Additional headers to send with requests\n * @param {boolean} options.camelCaseTypes If true, the `type` value will be camelCased, e.g `library-entries` and `library_entries` become `libraryEntries`  (default `true`)\n * @param {string} options.resourceCase `kebab`, `snake` or `none`. If `kebab`, `/libraryEntries` will become `/library-entries`. If `snake`, `/libraryEntries` will become `/library_entries`, If `none`, `/libraryEntries` will be unchanged (default `kebab`)\n * @param {boolean} options.pluralize If `true`, `/user` will become `/users` in the URL request and `type` will be pluralized in post, patch and delete requests - `user` -> `users` (default `true`)\n * @param {number} options.timeout Set the request timeout in milliseconds (default `30000`)\n * @example <caption>Using with Kitsu.io's API</caption>\n * const api = new Kitsu()\n * @example <caption>Using another API server</caption>\n * const api = new Kitsu({\n *   baseURL: 'https://api.example.org/2'\n * })\n * @example <caption>Setting headers</caption>\n * const api = new Kitsu({\n *   headers: {\n *     'User-Agent': 'MyApp/1.0.0 (github.com/username/repo)',\n *     Authorization: 'Bearer 1234567890'\n *   }\n * })\n */\nexport default class Kitsu {\n  constructor (options = {}) {\n    if (options.camelCaseTypes === false) this.camel = s => s\n    else this.camel = camel\n\n    if (options.resourceCase === 'none') this.resCase = s => s\n    else if (options.resourceCase === 'snake') this.resCase = snake\n    else this.resCase = kebab\n\n    /**\n     * If pluralization is enabled (default, see Kitsu constructor docs) then pluralization rules can be added\n     *\n     * @memberof Kitsu\n     * @external plural\n     * @see {@link https://www.npmjs.com/package/pluralize} for documentation\n     * @see Kitsu constructor options for disabling pluralization\n     * @example <caption>Adding an uncountable pluralization rule</caption>\n     * api.plural.plural('paper') //=> 'papers'\n     * api.plural.addUncountableRule('paper')\n     * api.plural.plural('paper') //=> 'paper'\n     *\n     */\n    if (options.pluralize === false) this.plural = s => s\n    else this.plural = require('pluralize')\n\n    /**\n     * Get the current headers or add additional headers\n     *\n     * @memberof Kitsu\n     * @returns {Object} All the current headers\n     * @example <caption>Get all headers</caption>\n     * api.headers\n     * @example <caption>Get a single header's value</caption>\n     * api.headers['User-Agent']\n     * @example <caption>Add or update a header's value</caption>\n     * api.headers['Authorization'] = 'Bearer 1234567890'\n     */\n    this.headers = Object.assign({}, options.headers, { 'Accept': 'application/vnd.api+json', 'Content-Type': 'application/vnd.api+json' })\n\n    this.axios = axios.create({\n      baseURL: options.baseURL || 'https://kitsu.io/api/edge',\n      timeout: options.timeout || 30000\n    })\n  }\n\n  /**\n   * Fetch resources (alias `fetch`)\n   *\n   * @memberof Kitsu\n   * @param {string} model Model to fetch data from\n   * @param {Object} params JSON-API request queries\n   * @param {Object} params.page [JSON:API Pagination](http://jsonapi.org/format/#fetching-pagination)\n   * @param {number} params.page.limit Number of resources to return in request (Max `20` for Kitsu.io except on `libraryEntries` which has a max of `500`)\n   * @param {number} params.page.offset Number of resources to offset the dataset by\n   * @param {Object} params.fields Return a sparse fieldset with only the included attributes/relationships - [JSON:API Sparse Fieldsets](http://jsonapi.org/format/#fetching-sparse-fieldsets)\n   * @param {Object} params.filter Filter dataset by attribute values - [JSON:API Filtering](http://jsonapi.org/format/#fetching-filtering)\n   * @param {string} params.sort Sort dataset by one or more comma separated attributes (prepend `-` for descending order) - [JSON:API Sorting](http://jsonapi.org/format/#fetching-sorting)\n   * @param {string} params.include Include relationship data - [JSON:API Includes](http://jsonapi.org/format/#fetching-includes)\n   * @param {Object} headers Additional headers to send with request\n   * @returns {Object} JSON-parsed response\n   * @example <caption>Getting a resource with JSON:API parameters</caption>\n   * api.get('users', {\n   *   fields: {\n   *     users: 'name,birthday'\n   *   },\n   *   filter: {\n   *     name: 'wopian'\n   *   }\n   * })\n   * @example <caption>Getting a collection of resources with their relationships</caption>\n   * api.get('anime', {\n   *   include: 'categories'\n   * })\n   * @example <caption>Getting a single resource by ID (method one)</caption>\n   * api.get('anime/2', {\n   *   include: 'categories'\n   * })\n   * @example <caption>Getting a single resource by ID (method two)</caption>\n   * api.get('anime', {\n   *   include: 'categories',\n   *   filter: { id: '2' }\n   * })\n   * @example <caption>Getting a resource's relationship data only</caption>\n   * api.get('anime/2/categories')\n   * @example <caption>Handling errors (async/await)</caption>\n   * try {\n   *   const { data } = await api.get('anime')\n   * } catch (err) {\n   *   // Array of JSON:API errors: http://jsonapi.org/format/#error-objects\n   *   if (err.errors) err.errors.forEach(error => { ... })\n   *   // Error type (Error, TypeError etc.)\n   *   err.name\n   *   // Error message\n   *   err.message\n   *   // Axios request parameters\n   *   err.config\n   *   // Axios response parameters\n   *   err.response\n   * }\n   * @example <caption>Handling errors (Promises)</caption>\n   * api.get('anime')\n   *   .then(({ data }) => { ... })\n   *   .catch(err => {\n   *     // Array of JSON:API errors: http://jsonapi.org/format/#error-objects\n   *     if (err.errors) err.errors.forEach(error => { ... })\n   *     // Error type (Error, TypeError etc.)\n   *     err.name\n   *     // Error message\n   *     err.message\n   *     // Axios request parameters\n   *     err.config\n   *     // Axios response parameters\n   *     err.response\n   *   })\n   */\n  async get (model, params = {}, headers = {}) {\n    try {\n      let [ res, id, relationship ] = model.split('/')\n\n      let url = this.plural(this.resCase(res))\n      if (id) url += `/${id}`\n      if (relationship) url += `/${this.resCase(relationship)}`\n\n      /* istanbul ignore next */\n      const { data } = await this.axios.get(url, {\n        params,\n        paramsSerializer: p => query(p),\n        headers: Object.assign(this.headers, headers)\n      })\n\n      return deserialise(data)\n    } catch (E) {\n      throw error(E)\n    }\n  }\n\n  /**\n   * Update a resource (alias `update`)\n   *\n   * @memberof Kitsu\n   * @param {string} model Model to update data in\n   * @param {Object} body Data to send in the request\n   * @param {Object} headers Additional headers to send with request\n   * @returns {Object} JSON-parsed response\n   * @example <caption>Update a post</caption>\n   * api.update('posts', {\n   *   id: '12345678',\n   *   content: 'Goodbye World'\n   * })\n   */\n  async patch (model, body, headers = {}) {\n    try {\n      const serialData = await serialise.apply(this, [ model, body, 'PATCH' ])\n      const url = this.plural(this.resCase(model)) + '/' + body.id\n      const { data } = await this.axios.patch(\n        url,\n        serialData,\n        { headers: Object.assign(this.headers, headers) }\n      )\n\n      return data\n    } catch (E) {\n      throw error(E)\n    }\n  }\n\n  /**\n   * Create a new resource (alias `create`)\n   *\n   * @memberof Kitsu\n   * @param {string} model Model to create a resource under\n   * @param {Object} body Data to send in the request\n   * @param {Object} headers Additional headers to send with request\n   * @returns {Object} JSON-parsed response\n   * @example <caption>Create a post on a user's profile feed</caption>\n   * api.create('posts', {\n   *   content: 'Hello World',\n   *   targetUser: {\n   *     id: '42603',\n   *     type: 'users'\n   *   },\n   *   user: {\n   *     id: '42603',\n   *     type: 'users'\n   *   }\n   * })\n   */\n  async post (model, body, headers = {}) {\n    try {\n      const url = this.plural(this.resCase(model))\n      const { data } = await this.axios.post(\n        url,\n        await serialise.apply(this, [ model, body ]),\n        { headers: Object.assign(this.headers, headers) }\n      )\n\n      return data\n    } catch (E) {\n      throw error(E)\n    }\n  }\n\n  /**\n   * Remove a resource\n   *\n   * @memberof Kitsu\n   * @param {string} model Model to remove data from\n   * @param {string|number} id Resource ID to remove\n   * @param {Object} headers Additional headers to send with request\n   * @returns {Object} JSON-parsed response\n   * @example <caption>Remove a user's post</caption>\n   * api.remove('posts', 123)\n   */\n  async remove (model, id, headers = {}) {\n    try {\n      const url = this.plural(this.resCase(model)) + '/' + id\n      const { data } = await this.axios.delete(url, {\n        data: await serialise.apply(this, [ model, { id }, 'DELETE' ]),\n        headers: Object.assign(this.headers, headers)\n      })\n\n      return data\n    } catch (E) {\n      throw error(E)\n    }\n  }\n\n  /**\n   * Get the authenticated user's data\n   *\n   * **Note** Requires the JSON:API server to support `filter[self]=true`\n   *\n   * @memberof Kitsu\n   * @param {Object} params JSON-API request queries\n   * @param {Object} params.fields Return a sparse fieldset with only the included attributes/relationships - [JSON:API Sparse Fieldsets](http://jsonapi.org/format/#fetching-sparse-fieldsets)\n   * @param {string} params.include Include relationship data - [JSON:API Includes](http://jsonapi.org/format/#fetching-includes)\n   * @param {Object} headers Additional headers to send with request\n   * @returns {Object} JSON-parsed response\n   * @example <caption>Get the authenticated user's resource</caption>\n   * api.self()\n   * @example <caption>Using JSON:API parameters</caption>\n   * api.self({\n   *   fields: 'name,birthday'\n   * })\n   */\n  async self (params = {}, headers = {}) {\n    try {\n      const res = await this.get('users', Object.assign({ filter: { self: true } }, params), headers)\n      return res.data[0]\n    } catch (E) {\n      throw error(E)\n    }\n  }\n\n  fetch = this.get\n  update = this.patch\n  create = this.post\n}\n"],"names":["Kitsu","options","fetch","get","update","patch","create","post","camel","camelCaseTypes","s","resCase","resourceCase","snake","kebab","plural","pluralize","require","headers","Object","assign","axios","baseURL","timeout","params","model","split","res","id","relationship","url","query","data","deserialise","error","serialData","serialise","apply","body","delete","filter","self"],"mappings":"oVA2BA,KAAqBA,MAAM,aACZC,EAAU,GAAI,MA6P3BC,MAAQ,KAAKC,GA7Pc,MA8P3BC,OAAS,KAAKC,KA9Pa,MA+P3BC,OAAS,KAAKC,IA/Pa,CACa,KAAKC,KADlB,CACrBP,OAAQQ,cADa,CAC0BC,MAD1B,CAEPF,eAFO,CAIY,KAAKG,OAJjB,CAII,MAAzBV,KAAQW,YAJa,CAI2BF,MAJ3B,CAKS,OAAzBT,KAAQW,YALQ,CAKiCC,eALjC,CAMLC,eANK,CAqBQ,KAAKC,MArBb,CAqBrBd,OAAQe,SArBa,CAqBsBN,MArBtB,CAsBNO,QAAQ,WAARA,CAtBM,MAoCpBC,QAAUC,OAAOC,MAAPD,CAAc,EAAdA,CAAkBlB,EAAQiB,OAA1BC,CAAmC,CAAE,OAAU,0BAAZ,CAAwC,eAAgB,0BAAxD,CAAnCA,CApCU,MAsCpBE,MAAQA,MAAMf,MAANe,CAAa,SACfpB,EAAQqB,OAARrB,EAAmB,2BADJ,SAEfA,EAAQsB,OAARtB,EAAmB,GAFJ,CAAboB,QA4EGG,EAAS,GAAIN,EAAU,GAAI,oDACvC,OAC8BO,EAAMC,KAAND,CAAY,GAAZA,2BAA1BE,QAAKC,OAAIC,OAEXC,EAAM,EAAKf,MAAL,CAAY,EAAKJ,OAAL,GAAZ,EAHR,IAIMmB,OAAQ,GAJd,MAKgBA,OAAW,EAAKnB,OAAL,KAL3B,QAQe,KAAM,GAAKU,KAAL,CAAWlB,GAAX,GAAoB,SAAA,kBAEvB,kBAAK4B,gBAAAA,GAFkB,CAAA,SAGhCZ,OAAOC,MAAPD,CAAc,EAAKD,OAAnBC,GAHgC,CAApB,OAAfa,KAAAA,WAMDC,sBAAAA,GAdT,CAeE,QAAU,MACJC,gBAAAA,mBAkBgBhB,EAAU,GAAI,oDAClC,MACIiB,GAAa,KAAMC,oBAAAA,CAAUC,KAAVD,GAAsB,KAAe,OAAf,CAAtBA,EACnBN,EAAM,EAAKf,MAAL,CAAY,EAAKJ,OAAL,GAAZ,EAAmC,GAAnC,CAAyC2B,EAAKV,SACzC,KAAM,GAAKP,KAAL,CAAWhB,KAAX,KAGrB,CAAEa,QAASC,OAAOC,MAAPD,CAAc,EAAKD,OAAnBC,GAAX,CAHqB,OAAfa,KAAAA,aAHV,CAUE,QAAU,MACJE,gBAAAA,kBAyBehB,EAAU,GAAI,oDACjC,MACIY,GAAM,EAAKf,MAAL,CAAY,EAAKJ,OAAL,GAAZ,QACK,KAAM,GAAKU,KAAL,CAAWd,IAAX,IAErB,KAAM6B,oBAAAA,CAAUC,KAAVD,GAAsB,KAAtBA,CAFe,EAGrB,CAAElB,QAASC,OAAOC,MAAPD,CAAc,EAAKD,OAAnBC,GAAX,CAHqB,OAAfa,KAAAA,aAFV,CASE,QAAU,MACJE,gBAAAA,oBAeehB,EAAU,GAAI,oDACjC,MACIY,GAAM,EAAKf,MAAL,CAAY,EAAKJ,OAAL,GAAZ,EAAmC,GAAnC,SACK,KAAM,GAAKU,KAAL,CAAWkB,MAAX,GAAuB,MACtC,KAAMH,oBAAAA,CAAUC,KAAVD,GAAsB,GAAS,CAAER,IAAF,CAAT,CAAiB,QAAjB,CAAtBQ,CADgC,SAEnCjB,OAAOC,MAAPD,CAAc,EAAKD,OAAnBC,GAFmC,CAAvB,OAAfa,KAAAA,aAFV,CAQE,QAAU,MACJE,gBAAAA,cAsBEV,EAAS,GAAIN,EAAU,GAAI,oDACjC,MACIS,GAAM,KAAM,GAAKxB,GAAL,CAAS,OAAT,CAAkBgB,OAAOC,MAAPD,CAAc,CAAEqB,OAAQ,CAAEC,OAAF,CAAV,CAAdtB,GAAlB,UACXQ,GAAIK,IAAJL,CAAS,CAATA,CAFT,CAGE,QAAU,MACJO,gBAAAA,SA1Pe"}